import numpy as np
import sklearn
import pandas as pd
import random
import sklearn.naive_bayes as naive_bayes
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import MinMaxScaler
from sklearn import preprocessing
from sklearn.metrics import confusion_matrix
def LostDel(Matrix):
    m=len(Matrix)
    n=len(Matrix[0])
    count=np.zeros(n)
    for i in range(n):
        for j in range(m):
            if Matrix[j][i]==0 : count[i]+=1
    count=count/m
    for i in range(n):
        if count[i]>0.3:
            Matrix=np.delete(Matrix,[i],axis=1)
    return Matrix
def feature_Choose(TrainMatrix,TrainLabels,TestMatrix):#对特征选取
    x1,x2,y1,y2=train_test_split(TrainMatrix,TrainLabels,test_size=0.3)
    clf=naive_bayes.MultinomialNB(alpha=1.0,fit_prior=None,class_prior=None)
    clf.fit(x1,y1)
    acc=clf.score(x2,y2)
    num=len(x1[0])
    weight=np.zeros(num)
    for i in range(num):
        a1=np.delete(x1,[i],axis=1)
        a2=np.delete(x2,[i],axis=1)
        clf=naive_bayes.MultinomialNB(alpha=1.0,fit_prior=None,class_prior=None)
        clf.fit(a1,y1)
        weight[i]=clf.score(a2,y2)/acc
        #print(weight[i])
    for i in range(num):
        if weight[num-i-1]>0.98:
            TrainMatrix=np.delete(TrainMatrix,[num-i-1],axis=1)
            TestMatrix=np.delete(TestMatrix,[num-i-1],axis=1)
    return TrainMatrix,TestMatrix
    
def DataGet():
    data=pd.read_csv('D:/lessonrelated/机器学习/voice_Recognition/voice.csv')#,dtype={''}可指定数据类型
    a=data.values
    m=len(a)
    n=len(a[0])
    Labels=np.zeros(m)
    for i in range(m):
        if a[i][n-1]=='male':
            Labels[i]=1
    Matrix=np.delete(a,-1,axis=1)#删除最后一列
    Matrix=Matrix.astype(float)
    Matrix=LostDel(Matrix)
    k=Matrix.mean(axis=0)
    for i in range(n-1):
        for j in range(m):
            if Matrix[j][i]==0:
                Matrix[j][i]=k[i]
    return train_test_split(Matrix,Labels,test_size=0.3)
    
def scale(TrainMatrix,TestMatrix):#归一化
    a=np.max(TrainMatrix,axis=0)
    b=np.min(TrainMatrix,axis=0)
    m=len(TrainMatrix)
    n=len(TrainMatrix[0])
    for i in range(n):
        for j in range(m):
            TrainMatrix[j][i]=(TrainMatrix[j][i]-b[i])/(a[i]-b[i])
    m=len(TestMatrix)
    n=len(TestMatrix[0])
    for i in range(n):
        for j in range(m):
            TestMatrix[j][i]=(TestMatrix[j][i]-b[i])/(a[i]-b[i])
            if TestMatrix[j][i]<0 : TestMatrix[j][i]=0
            if TestMatrix[j][i]>20 : TestMatrix[j][i]=20
    return TrainMatrix,TestMatrix

def discretelize(TrainMatrix,TestMatrix):#离散化
    TrainMatrix,TestMatrix=scale(TrainMatrix,TestMatrix)
    TrainMatrix=TrainMatrix*20
    TrainMatrix=TrainMatrix.astype(int)
    TestMatrix=TestMatrix*20
    TestMatrix=TestMatrix.astype(int)
    return TrainMatrix,TestMatrix
    
def MutiBayes(TrainMatrix,TestMatrix,TrainLabels,TestLabels):
    TrainMatrix,TestMatrix=discretelize(TrainMatrix,TestMatrix)
    TrainMatrix,TestMatrix=feature_Choose(TrainMatrix,TrainLabels,TestMatrix)
    clf = naive_bayes.MultinomialNB(alpha=1.0,fit_prior=None,class_prior=None)
    clf.fit(TrainMatrix,TrainLabels)
    print(clf.score(TestMatrix,TestLabels))
